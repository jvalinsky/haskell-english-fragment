module Model where

import Data.List
import Semilattice

-- This constrains type variable a to be an instance of Entity
type OnePlacePred   = Entity -> Bool
type TwoPlacePred   = Entity -> Entity -> Bool
type ThreePlacePred = Entity -> Entity -> Entity -> Bool

-- Entity Types
data Atom = Sword1      | Sword2   | Alice'   | Bob'    | Cyrus'    | Ellie'   | 
            Goldilocks' | Hillary' | Irene'   | Jim'    | Kim'      | Linda'   | 
            Noah'       | Ollie'   | Penny'   | Quine'  | Dagger1    | Stuart'  |
            SnowWhite'  | Tom'     | Uli'     | Victor' | Willie'   | Xena'    |
            Zorba'      | Atreyu'  | Cup1     | Cup2    | Bottle1   | Bottle2  | 
            Dress1      | Dress2   | Raft1    | Raft2   | Raft3     | Raft4    |
            Dorothy'    | Fred'    | Glasses1 | Jeans1  | Whiskers' | Mittens' | 
            Gerald'     | Minnie'  | Mickey'  | Sue' | The_Genesee' deriving (Eq, Show, Bounded, Enum)

data MassT = Water' | Wood' | Air'  | Wine'   | Fabric' |
             Metal' | Rust' | Gold' | Advice' | Ice'    | Everything deriving (Eq, Show)

data Entity = Pl' [[Atom]] | Ms' [[Atom]] deriving (Eq, Show)

atom :: Entity -> Bool
atom (Ms' x) = True
atom (Pl' (xs:xss)) = xss == [] && length xs == 1


{-
* extension function for a predicate P
m mass term correspondent for P
c proper plural predicate of P
sigma sum of predicates
sigma* proper sum of predicates

Pi individual part (i-part) relation
m  material   part (m-part) relation

mu material fusion of P's
At x := x is an atom
Distr(P) := P is distributive

||P|| := extension of P, generated by join-semilattice

i-sum 
fusion 
-}
